// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Repositories.Models;
using System;
using System.Collections.Generic;

namespace Repositories.DBContext;

public partial class Drug_use_prevention_systemContext : DbContext
{
    public Drug_use_prevention_systemContext()
    {
    }

    public Drug_use_prevention_systemContext(DbContextOptions<Drug_use_prevention_systemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AgeGroup> AgeGroups { get; set; }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<Assessment> Assessments { get; set; }

    public virtual DbSet<AssessmentOption> AssessmentOptions { get; set; }

    public virtual DbSet<AssessmentQuestion> AssessmentQuestions { get; set; }

    public virtual DbSet<AssessmentType> AssessmentTypes { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<Certification> Certifications { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Consultant> Consultants { get; set; }

    public virtual DbSet<ConsultantsAvailability> ConsultantsAvailabilities { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseCategory> CourseCategories { get; set; }

    public virtual DbSet<CourseQuestion> CourseQuestions { get; set; }

    public virtual DbSet<CourseQuestionOption> CourseQuestionOptions { get; set; }

    public virtual DbSet<CourseRegister> CourseRegisters { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<RiskLevel> RiskLevels { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAnswer> UserAnswers { get; set; }

    public virtual DbSet<UserAssessment> UserAssessments { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

	//Khi mà sửa database thì phải thêm dòng này vào file context mới
	public static string GetConnectionString(string connectionStringName)
	{
		var config = new ConfigurationBuilder()
			.SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
			.AddJsonFile("appsettings.json")
			.Build();

		string connectionString = config.GetConnectionString(connectionStringName);
		return connectionString;
	}
	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
	=> optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));
	//

	protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AgeGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PK__Age_grou__3198126961A2DE35");

            entity.ToTable("Age_group");

            entity.Property(e => e.GroupId).HasColumnName("Group_ID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.MaxAge).HasColumnName("Max_age");
            entity.Property(e => e.MinAge).HasColumnName("Min_age");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("PK__Appointm__FD01B5038FFA0D5A");

            entity.Property(e => e.AppointmentId).HasColumnName("Appointment_ID");
            entity.Property(e => e.AvailabilityId).HasColumnName("Availability_ID");
            entity.Property(e => e.ConsultantId).HasColumnName("Consultant_ID");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("Created_date");
            entity.Property(e => e.MeetingLink)
                .HasMaxLength(500)
                .HasColumnName("Meeting_link");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UserId).HasColumnName("User_ID");

            entity.HasOne(d => d.Availability).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.AvailabilityId)
                .HasConstraintName("FK_Appointment_ConsultantsAvailability");

            entity.HasOne(d => d.Consultant).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.ConsultantId)
                .HasConstraintName("FK__Appointme__Consu__46E78A0C");

            entity.HasOne(d => d.MaterialNavigation).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.Material)
                .HasConstraintName("FK__Appointme__Mater__47DBAE45");

            entity.HasOne(d => d.User).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Appointme__User___45F365D3");
        });

        modelBuilder.Entity<Assessment>(entity =>
        {
            entity.HasKey(e => e.AssessmentId).HasName("PK__Assessme__6B3C1D92BD7EA292");

            entity.Property(e => e.AssessmentId).HasColumnName("Assessment_ID");
            entity.Property(e => e.AgeGroup).HasColumnName("Age_group");
            entity.Property(e => e.AssessmentType).HasColumnName("Assessment_type");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("Created_date");
            entity.Property(e => e.IsActive).HasColumnName("Is_active");
            entity.Property(e => e.Title).HasMaxLength(200);

            entity.HasOne(d => d.AgeGroupNavigation).WithMany(p => p.Assessments)
                .HasForeignKey(d => d.AgeGroup)
                .HasConstraintName("FK__Assessmen__Age_g__71D1E811");

            entity.HasOne(d => d.AssessmentTypeNavigation).WithMany(p => p.Assessments)
                .HasForeignKey(d => d.AssessmentType)
                .HasConstraintName("FK__Assessmen__Asses__70DDC3D8");
        });

        modelBuilder.Entity<AssessmentOption>(entity =>
        {
            entity.HasKey(e => e.OptionId).HasName("PK__Assessme__3260905E133A1AC3");

            entity.ToTable("Assessment_options");

            entity.Property(e => e.OptionId).HasColumnName("Option_ID");
            entity.Property(e => e.OptionText)
                .HasMaxLength(200)
                .HasColumnName("Option_text");
            entity.Property(e => e.OptionValue).HasColumnName("Option_value");
            entity.Property(e => e.QuestionId).HasColumnName("Question_ID");

            entity.HasOne(d => d.Question).WithMany(p => p.AssessmentOptions)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__Assessmen__Quest__7E37BEF6");
        });

        modelBuilder.Entity<AssessmentQuestion>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK__Assessme__B0B2E4C6DA5659F4");

            entity.ToTable("Assessment_questions");

            entity.Property(e => e.QuestionId).HasColumnName("Question_ID");
            entity.Property(e => e.AssessmentId).HasColumnName("Assessment_ID");
            entity.Property(e => e.QuestionText).HasColumnName("Question_text");
            entity.Property(e => e.QuestionType)
                .HasMaxLength(50)
                .HasColumnName("Question_type");

            entity.HasOne(d => d.Assessment).WithMany(p => p.AssessmentQuestions)
                .HasForeignKey(d => d.AssessmentId)
                .HasConstraintName("FK__Assessmen__Asses__7B5B524B");
        });

        modelBuilder.Entity<AssessmentType>(entity =>
        {
            entity.HasKey(e => e.AssessmentTypeId).HasName("PK__Assessme__9B54AECBFE979ABC");

            entity.ToTable("Assessment_Type");

            entity.Property(e => e.AssessmentTypeId).HasColumnName("Assessment_type_ID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.BlogId).HasName("PK__Blog__C164D01896C4E54E");

            entity.ToTable("Blog");

            entity.Property(e => e.BlogId).HasColumnName("Blog_ID");
            entity.Property(e => e.AuthorId).HasColumnName("Author_ID");
            entity.Property(e => e.PublishedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Published_date");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.Title).HasMaxLength(200);

            entity.HasOne(d => d.Author).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.AuthorId)
                .HasConstraintName("FK__Blog__Author_ID__4BAC3F29");
        });

        modelBuilder.Entity<Certification>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.CourseId }).HasName("PK__Certific__831391CF7F97DCC5");

            entity.ToTable("Certification");

            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.CourseId).HasColumnName("Course_ID");
            entity.Property(e => e.AchievedDate).HasColumnName("Achieved_date");
            entity.Property(e => e.CertificationCode)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Certification_code");
            entity.Property(e => e.CertificationUrl)
                .IsRequired()
                .HasMaxLength(300)
                .HasColumnName("Certification_URL");
            entity.Property(e => e.Name).HasMaxLength(200);

            entity.HasOne(d => d.Course).WithMany(p => p.Certifications)
                .HasForeignKey(d => d.CourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Certifica__Cours__5EBF139D");

            entity.HasOne(d => d.User).WithMany(p => p.Certifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Certifica__User___5DCAEF64");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("PK__Comment__99FC143BD99CA2C4");

            entity.ToTable("Comment");

            entity.Property(e => e.CommentId).HasColumnName("Comment_ID");
            entity.Property(e => e.BlogId).HasColumnName("Blog_ID");
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.PostDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Post_date");
            entity.Property(e => e.UserId).HasColumnName("User_ID");

            entity.HasOne(d => d.Blog).WithMany(p => p.Comments)
                .HasForeignKey(d => d.BlogId)
                .HasConstraintName("FK__Comment__Blog_ID__5070F446");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Comment__User_ID__4F7CD00D");
        });

        modelBuilder.Entity<Consultant>(entity =>
        {
            entity.HasKey(e => e.Number).HasName("PK__Consulta__78A1A19C0C54FC4A");

            entity.Property(e => e.ConsultantId).HasColumnName("Consultant_ID");
            entity.Property(e => e.ExperienceYears).HasColumnName("Experience_years");
            entity.Property(e => e.IsActive).HasColumnName("Is_active");
            entity.Property(e => e.Qualifications)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Specification)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.ConsultantNavigation).WithMany(p => p.Consultants)
                .HasForeignKey(d => d.ConsultantId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Consultan__Consu__3E52440B");
        });

        modelBuilder.Entity<ConsultantsAvailability>(entity =>
        {
            entity.HasKey(e => e.AvailabilityId).HasName("PK__Consulta__9F3391BB27B6B88A");

            entity.ToTable("Consultants_availability");

            entity.Property(e => e.AvailabilityId).HasColumnName("Availability_ID");
            entity.Property(e => e.ConsultantId).HasColumnName("Consultant_ID");
            entity.Property(e => e.IsAvailable).HasDefaultValue(true);

            entity.HasOne(d => d.Consultant).WithMany(p => p.ConsultantsAvailabilities)
                .HasForeignKey(d => d.ConsultantId)
                .HasConstraintName("FK__Consultan__Consu__412EB0B6");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.CourseId).HasName("PK__Course__37E005FB2244AA1F");

            entity.ToTable("Course");

            entity.Property(e => e.CourseId).HasColumnName("Course_ID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_at");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DocumentContent)
                .IsRequired()
                .HasColumnName("Document_content");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VideoUrl)
                .IsRequired()
                .HasMaxLength(300)
                .HasColumnName("VideoURL");

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.Courses)
                .HasForeignKey(d => d.Category)
                .HasConstraintName("FK__Course__Category__5629CD9C");
        });

        modelBuilder.Entity<CourseCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Course_c__6DB38D4E10E81F80");

            entity.ToTable("Course_category");

            entity.Property(e => e.CategoryId).HasColumnName("Category_ID");
            entity.Property(e => e.Age)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<CourseQuestion>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK__Course_q__B0B2E4C6803B7BD1");

            entity.ToTable("Course_question");

            entity.Property(e => e.QuestionId).HasColumnName("Question_ID");
            entity.Property(e => e.CourseId).HasColumnName("Course_ID");
            entity.Property(e => e.DisplayOrder).HasColumnName("Display_order");
            entity.Property(e => e.IsRequired).HasColumnName("Is_required");
            entity.Property(e => e.QuestionText)
                .IsRequired()
                .HasColumnName("Question_text");

            entity.HasOne(d => d.Course).WithMany(p => p.CourseQuestions)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Course_qu__Cours__619B8048");
        });

        modelBuilder.Entity<CourseQuestionOption>(entity =>
        {
            entity.HasKey(e => e.OptionId).HasName("PK__Course_q__3260905E7B1B60D6");

            entity.ToTable("Course_question_options");

            entity.Property(e => e.OptionId).HasColumnName("Option_ID");
            entity.Property(e => e.DisplayOrder).HasColumnName("Display_order");
            entity.Property(e => e.OptionText)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("Option_text");
            entity.Property(e => e.OptionValue).HasColumnName("Option_value");
            entity.Property(e => e.QuestionId).HasColumnName("Question_ID");

            entity.HasOne(d => d.Question).WithMany(p => p.CourseQuestionOptions)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__Course_qu__Quest__6477ECF3");
        });

        modelBuilder.Entity<CourseRegister>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.CourseId }).HasName("PK__Course_r__831391CF2A8CCAA5");

            entity.ToTable("Course_register");

            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.CourseId).HasColumnName("Course_ID");
            entity.Property(e => e.RegisterDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Register_date");

            entity.HasOne(d => d.Course).WithMany(p => p.CourseRegisters)
                .HasForeignKey(d => d.CourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Course_re__Cours__5AEE82B9");

            entity.HasOne(d => d.User).WithMany(p => p.CourseRegisters)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Course_re__User___59FA5E80");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.HasKey(e => e.MaterialId).HasName("PK__Document__3A09B0FDB069023F");

            entity.ToTable("Document");

            entity.Property(e => e.MaterialId).HasColumnName("Material_ID");
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<RiskLevel>(entity =>
        {
            entity.HasKey(e => e.RiskId).HasName("PK__Risk_lev__53E19F0A014B9638");

            entity.ToTable("Risk_level");

            entity.Property(e => e.RiskId).HasColumnName("Risk_ID");
            entity.Property(e => e.RiskDescription).HasColumnName("Risk_description");
            entity.Property(e => e.RiskLevel1)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Risk_level");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__206D9190BDFED7DB");

            entity.ToTable("User");

            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_date");
            entity.Property(e => e.DateOfBirth).HasColumnName("Date_of_birth");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Full_name");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.RoleId).HasDefaultValue(3);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__User__RoleId__3B75D760");
        });

        modelBuilder.Entity<UserAnswer>(entity =>
        {
            entity.HasKey(e => e.AnswerId).HasName("PK__User_Ans__36918F583BBBDFB0");

            entity.ToTable("User_Answer");

            entity.Property(e => e.AnswerId).HasColumnName("Answer_ID");
            entity.Property(e => e.AnswerAt)
                .HasColumnType("datetime")
                .HasColumnName("Answer_at");
            entity.Property(e => e.CourseId).HasColumnName("Course_ID");
            entity.Property(e => e.OptionId).HasColumnName("Option_ID");
            entity.Property(e => e.QuestionId).HasColumnName("Question_ID");
            entity.Property(e => e.TotalPoint).HasColumnName("Total_Point");
            entity.Property(e => e.UserId).HasColumnName("User_ID");

            entity.HasOne(d => d.Course).WithMany(p => p.UserAnswers)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__User_Answ__Cours__6754599E");

            entity.HasOne(d => d.Option).WithMany(p => p.UserAnswers)
                .HasForeignKey(d => d.OptionId)
                .HasConstraintName("FK__User_Answ__Optio__6A30C649");

            entity.HasOne(d => d.Question).WithMany(p => p.UserAnswers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__User_Answ__Quest__693CA210");

            entity.HasOne(d => d.User).WithMany(p => p.UserAnswers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__User_Answ__User___68487DD7");
        });

        modelBuilder.Entity<UserAssessment>(entity =>
        {
            entity.HasKey(e => e.UserAssessmentId).HasName("PK__User_ass__E66ED1FAC222A97E");

            entity.ToTable("User_assessments");

            entity.Property(e => e.UserAssessmentId).HasColumnName("User_assessment_ID");
            entity.Property(e => e.AssessmentId).HasColumnName("Assessment_ID");
            entity.Property(e => e.CompletedTime)
                .HasColumnType("datetime")
                .HasColumnName("Completed_time");
            entity.Property(e => e.RiskLevel).HasColumnName("Risk_level");
            entity.Property(e => e.Score).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.UserId).HasColumnName("User_ID");

            entity.HasOne(d => d.Assessment).WithMany(p => p.UserAssessments)
                .HasForeignKey(d => d.AssessmentId)
                .HasConstraintName("FK__User_asse__Asses__76969D2E");

            entity.HasOne(d => d.RiskLevelNavigation).WithMany(p => p.UserAssessments)
                .HasForeignKey(d => d.RiskLevel)
                .HasConstraintName("FK__User_asse__Risk___787EE5A0");

            entity.HasOne(d => d.User).WithMany(p => p.UserAssessments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__User_asse__User___778AC167");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__User_Rol__D80AB49BB584C745");

            entity.ToTable("User_Role");

            entity.Property(e => e.RoleId).HasColumnName("Role_ID");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Role_Name");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}